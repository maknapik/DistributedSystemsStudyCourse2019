# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `Bank.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Bank
_M_Bank = Ice.openModule('Bank')
__name__ = 'Bank'

if 'Currency' not in _M_Bank.__dict__:
    _M_Bank.Currency = Ice.createTempClass()
    class Currency(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Currency.PLN = Currency("PLN", 0)
    Currency.GBP = Currency("GBP", 1)
    Currency.USD = Currency("USD", 2)
    Currency.CHF = Currency("CHF", 3)
    Currency.EUR = Currency("EUR", 4)
    Currency._enumerators = { 0:Currency.PLN, 1:Currency.GBP, 2:Currency.USD, 3:Currency.CHF, 4:Currency.EUR }

    _M_Bank._t_Currency = IcePy.defineEnum('::Bank::Currency', Currency, (), Currency._enumerators)

    _M_Bank.Currency = Currency
    del Currency

if 'AccountType' not in _M_Bank.__dict__:
    _M_Bank.AccountType = Ice.createTempClass()
    class AccountType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AccountType.STANDARD = AccountType("STANDARD", 0)
    AccountType.PREMIUM = AccountType("PREMIUM", 1)
    AccountType._enumerators = { 0:AccountType.STANDARD, 1:AccountType.PREMIUM }

    _M_Bank._t_AccountType = IcePy.defineEnum('::Bank::AccountType', AccountType, (), AccountType._enumerators)

    _M_Bank.AccountType = AccountType
    del AccountType

if 'AccountCreated' not in _M_Bank.__dict__:
    _M_Bank.AccountCreated = Ice.createTempClass()
    class AccountCreated(object):
        def __init__(self, password='', userAccountType=_M_Bank.AccountType.STANDARD):
            self.password = password
            self.userAccountType = userAccountType

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.password)
            _h = 5 * _h + Ice.getHash(self.userAccountType)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.AccountCreated):
                return NotImplemented
            else:
                if self.password is None or other.password is None:
                    if self.password != other.password:
                        return (-1 if self.password is None else 1)
                else:
                    if self.password < other.password:
                        return -1
                    elif self.password > other.password:
                        return 1
                if self.userAccountType is None or other.userAccountType is None:
                    if self.userAccountType != other.userAccountType:
                        return (-1 if self.userAccountType is None else 1)
                else:
                    if self.userAccountType < other.userAccountType:
                        return -1
                    elif self.userAccountType > other.userAccountType:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountCreated)

        __repr__ = __str__

    _M_Bank._t_AccountCreated = IcePy.defineStruct('::Bank::AccountCreated', AccountCreated, (), (
        ('password', (), IcePy._t_string),
        ('userAccountType', (), _M_Bank._t_AccountType)
    ))

    _M_Bank.AccountCreated = AccountCreated
    del AccountCreated

if 'Credentials' not in _M_Bank.__dict__:
    _M_Bank.Credentials = Ice.createTempClass()
    class Credentials(object):
        def __init__(self, pesel='', password=''):
            self.pesel = pesel
            self.password = password

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.pesel)
            _h = 5 * _h + Ice.getHash(self.password)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.Credentials):
                return NotImplemented
            else:
                if self.pesel is None or other.pesel is None:
                    if self.pesel != other.pesel:
                        return (-1 if self.pesel is None else 1)
                else:
                    if self.pesel < other.pesel:
                        return -1
                    elif self.pesel > other.pesel:
                        return 1
                if self.password is None or other.password is None:
                    if self.password != other.password:
                        return (-1 if self.password is None else 1)
                else:
                    if self.password < other.password:
                        return -1
                    elif self.password > other.password:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_Credentials)

        __repr__ = __str__

    _M_Bank._t_Credentials = IcePy.defineStruct('::Bank::Credentials', Credentials, (), (
        ('pesel', (), IcePy._t_string),
        ('password', (), IcePy._t_string)
    ))

    _M_Bank.Credentials = Credentials
    del Credentials

if 'CreditEstimate' not in _M_Bank.__dict__:
    _M_Bank.CreditEstimate = Ice.createTempClass()
    class CreditEstimate(object):
        def __init__(self, originCurrency=0.0, foreignCurrency=0.0):
            self.originCurrency = originCurrency
            self.foreignCurrency = foreignCurrency

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.CreditEstimate):
                return NotImplemented
            else:
                if self.originCurrency != other.originCurrency:
                    return False
                if self.foreignCurrency != other.foreignCurrency:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_CreditEstimate)

        __repr__ = __str__

    _M_Bank._t_CreditEstimate = IcePy.defineStruct('::Bank::CreditEstimate', CreditEstimate, (), (
        ('originCurrency', (), IcePy._t_double),
        ('foreignCurrency', (), IcePy._t_double)
    ))

    _M_Bank.CreditEstimate = CreditEstimate
    del CreditEstimate

if 'InvalidCredentialsException' not in _M_Bank.__dict__:
    _M_Bank.InvalidCredentialsException = Ice.createTempClass()
    class InvalidCredentialsException(Ice.UserException):
        def __init__(self, reason="Invalid credentials"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::InvalidCredentialsException'

    _M_Bank._t_InvalidCredentialsException = IcePy.defineException('::Bank::InvalidCredentialsException', InvalidCredentialsException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    InvalidCredentialsException._ice_type = _M_Bank._t_InvalidCredentialsException

    _M_Bank.InvalidCredentialsException = InvalidCredentialsException
    del InvalidCredentialsException

if 'InvalidAccountTypeException' not in _M_Bank.__dict__:
    _M_Bank.InvalidAccountTypeException = Ice.createTempClass()
    class InvalidAccountTypeException(Ice.UserException):
        def __init__(self, reason="Invalid account type"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::InvalidAccountTypeException'

    _M_Bank._t_InvalidAccountTypeException = IcePy.defineException('::Bank::InvalidAccountTypeException', InvalidAccountTypeException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    InvalidAccountTypeException._ice_type = _M_Bank._t_InvalidAccountTypeException

    _M_Bank.InvalidAccountTypeException = InvalidAccountTypeException
    del InvalidAccountTypeException

_M_Bank._t_Account = IcePy.defineValue('::Bank::Account', Ice.Value, -1, (), False, True, None, ())

if 'AccountPrx' not in _M_Bank.__dict__:
    _M_Bank.AccountPrx = Ice.createTempClass()
    class AccountPrx(Ice.ObjectPrx):

        def getAccountType(self, context=None):
            return _M_Bank.Account._op_getAccountType.invoke(self, ((), context))

        def getAccountTypeAsync(self, context=None):
            return _M_Bank.Account._op_getAccountType.invokeAsync(self, ((), context))

        def begin_getAccountType(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_getAccountType.begin(self, ((), _response, _ex, _sent, context))

        def end_getAccountType(self, _r):
            return _M_Bank.Account._op_getAccountType.end(self, _r)

        def getAccountBalance(self, context=None):
            return _M_Bank.Account._op_getAccountBalance.invoke(self, ((), context))

        def getAccountBalanceAsync(self, context=None):
            return _M_Bank.Account._op_getAccountBalance.invokeAsync(self, ((), context))

        def begin_getAccountBalance(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_getAccountBalance.begin(self, ((), _response, _ex, _sent, context))

        def end_getAccountBalance(self, _r):
            return _M_Bank.Account._op_getAccountBalance.end(self, _r)

        def applyForCredit(self, creditCurrency, balance, period, context=None):
            return _M_Bank.Account._op_applyForCredit.invoke(self, ((creditCurrency, balance, period), context))

        def applyForCreditAsync(self, creditCurrency, balance, period, context=None):
            return _M_Bank.Account._op_applyForCredit.invokeAsync(self, ((creditCurrency, balance, period), context))

        def begin_applyForCredit(self, creditCurrency, balance, period, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_applyForCredit.begin(self, ((creditCurrency, balance, period), _response, _ex, _sent, context))

        def end_applyForCredit(self, _r):
            return _M_Bank.Account._op_applyForCredit.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.AccountPrx.ice_checkedCast(proxy, '::Bank::Account', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.AccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'
    _M_Bank._t_AccountPrx = IcePy.defineProxy('::Bank::Account', AccountPrx)

    _M_Bank.AccountPrx = AccountPrx
    del AccountPrx

    _M_Bank.Account = Ice.createTempClass()
    class Account(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::Account', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::Account'

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'

        def getAccountType(self, current=None):
            raise NotImplementedError("servant method 'getAccountType' not implemented")

        def getAccountBalance(self, current=None):
            raise NotImplementedError("servant method 'getAccountBalance' not implemented")

        def applyForCredit(self, creditCurrency, balance, period, current=None):
            raise NotImplementedError("servant method 'applyForCredit' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountDisp)

        __repr__ = __str__

    _M_Bank._t_AccountDisp = IcePy.defineClass('::Bank::Account', Account, (), None, ())
    Account._ice_type = _M_Bank._t_AccountDisp

    Account._op_getAccountType = IcePy.Operation('getAccountType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Bank._t_AccountType, False, 0), ())
    Account._op_getAccountBalance = IcePy.Operation('getAccountBalance', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    Account._op_applyForCredit = IcePy.Operation('applyForCredit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Bank._t_Currency, False, 0), ((), IcePy._t_double, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_Bank._t_CreditEstimate, False, 0), (_M_Bank._t_InvalidAccountTypeException,))

    _M_Bank.Account = Account
    del Account

_M_Bank._t_AccountFactory = IcePy.defineValue('::Bank::AccountFactory', Ice.Value, -1, (), False, True, None, ())

if 'AccountFactoryPrx' not in _M_Bank.__dict__:
    _M_Bank.AccountFactoryPrx = Ice.createTempClass()
    class AccountFactoryPrx(Ice.ObjectPrx):

        def createAccount(self, name, surname, pesel, balance, context=None):
            return _M_Bank.AccountFactory._op_createAccount.invoke(self, ((name, surname, pesel, balance), context))

        def createAccountAsync(self, name, surname, pesel, balance, context=None):
            return _M_Bank.AccountFactory._op_createAccount.invokeAsync(self, ((name, surname, pesel, balance), context))

        def begin_createAccount(self, name, surname, pesel, balance, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.AccountFactory._op_createAccount.begin(self, ((name, surname, pesel, balance), _response, _ex, _sent, context))

        def end_createAccount(self, _r):
            return _M_Bank.AccountFactory._op_createAccount.end(self, _r)

        def obtainAccess(self, userCredentials, context=None):
            return _M_Bank.AccountFactory._op_obtainAccess.invoke(self, ((userCredentials, ), context))

        def obtainAccessAsync(self, userCredentials, context=None):
            return _M_Bank.AccountFactory._op_obtainAccess.invokeAsync(self, ((userCredentials, ), context))

        def begin_obtainAccess(self, userCredentials, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.AccountFactory._op_obtainAccess.begin(self, ((userCredentials, ), _response, _ex, _sent, context))

        def end_obtainAccess(self, _r):
            return _M_Bank.AccountFactory._op_obtainAccess.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.AccountFactoryPrx.ice_checkedCast(proxy, '::Bank::AccountFactory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.AccountFactoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::AccountFactory'
    _M_Bank._t_AccountFactoryPrx = IcePy.defineProxy('::Bank::AccountFactory', AccountFactoryPrx)

    _M_Bank.AccountFactoryPrx = AccountFactoryPrx
    del AccountFactoryPrx

    _M_Bank.AccountFactory = Ice.createTempClass()
    class AccountFactory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::AccountFactory', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::AccountFactory'

        @staticmethod
        def ice_staticId():
            return '::Bank::AccountFactory'

        def createAccount(self, name, surname, pesel, balance, current=None):
            raise NotImplementedError("servant method 'createAccount' not implemented")

        def obtainAccess(self, userCredentials, current=None):
            raise NotImplementedError("servant method 'obtainAccess' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountFactoryDisp)

        __repr__ = __str__

    _M_Bank._t_AccountFactoryDisp = IcePy.defineClass('::Bank::AccountFactory', AccountFactory, (), None, ())
    AccountFactory._ice_type = _M_Bank._t_AccountFactoryDisp

    AccountFactory._op_createAccount = IcePy.Operation('createAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_double, False, 0)), (), ((), _M_Bank._t_AccountCreated, False, 0), ())
    AccountFactory._op_obtainAccess = IcePy.Operation('obtainAccess', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Bank._t_Credentials, False, 0),), (), ((), _M_Bank._t_AccountPrx, False, 0), (_M_Bank._t_InvalidCredentialsException,))

    _M_Bank.AccountFactory = AccountFactory
    del AccountFactory

# End of module Bank
